syntax = "proto3";

package agglayer.node.v1;

import "agglayer/protocol/types/v1/certificate_header.proto";
import "agglayer/protocol/types/v1/epoch_configuration.proto";

// Service for querying the current epoch configuration.
service ConfigurationService {
  // Method used to get the current epoch configuration.
  rpc GetEpochConfiguration(GetEpochConfigurationRequest)
      returns (GetEpochConfigurationResponse);
}

// Service for querying network state.
service NetworkStateService {
  // Method used to get the latest known certificate header for a network.
  rpc GetLatestKnownCertificateHeader(GetLatestKnownCertificateHeaderRequest)
      returns (GetLatestKnownCertificateHeaderResponse);

  // Method used to get the latest settled certificate header for a network.
  rpc GetLatestSettledCertificateHeader(
      GetLatestSettledCertificateHeaderRequest)
      returns (GetLatestSettledCertificateHeaderResponse);

  // Method used to get the latest pending certificate header for a network.
  rpc GetLatestPendingCertificateHeader(
      GetLatestPendingCertificateHeaderRequest)
      returns (GetLatestPendingCertificateHeaderResponse);
}

// Request to get the current epoch configuration.
message GetEpochConfigurationRequest {}
// Response to the current epoch configuration request.
message GetEpochConfigurationResponse {
  // The epoch configuration.
  protocol.types.v1.EpochConfiguration epoch_configuration = 1;
}

// Request to get the latest known certificate header for a network.
message GetLatestKnownCertificateHeaderRequest {
  // The network identifier.
  uint32 network_id = 1;
}

// Response to the latest known certificate header request.
message GetLatestKnownCertificateHeaderResponse {
  // The latest known certificate header.
  protocol.types.v1.CertificateHeader certificate_header = 1;
}

// Request to get the latest settled certificate header for a network.
message GetLatestSettledCertificateHeaderRequest {
  // The network identifier.
  uint32 network_id = 1;
}

// Response to the latest settled certificate header request.
message GetLatestSettledCertificateHeaderResponse {
  // The latest settled certificate header.
  protocol.types.v1.CertificateHeader certificate_header = 1;
}

// Request to get the latest pending certificate header for a network.
message GetLatestPendingCertificateHeaderRequest {
  // The network identifier.
  uint32 network_id = 1;
}

// Response to the latest pending certificate header request.
message GetLatestPendingCertificateHeaderResponse {
  // The latest pending certificate header.
  protocol.types.v1.CertificateHeader certificate_header = 1;
}
