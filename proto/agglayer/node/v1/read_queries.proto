syntax = "proto3";

package agglayer.node.v1;

import "agglayer/protocol/types/v1/certificate.proto";
import "agglayer/protocol/types/v1/certificate_header.proto";
import "agglayer/protocol/types/v1/epoch_configuration.proto";

// Service for querying the current epoch configuration.
service ConfigurationService {
  // Method used to get the current epoch configuration.
  rpc GetEpochConfiguration(GetEpochConfigurationRequest) returns (GetEpochConfigurationResponse);
}

// The kind of error that occurred and that are reported by the configuration
// service.
enum ConfigurationErrorKind {
  // Unspecified error.
  CONFIGURATION_ERROR_KIND_UNSPECIFIED = 0;
  // The AggLayer isn't configured with a BlockClock configuration, thus no
  // EpochConfiguration is available.
  CONFIGURATION_ERROR_KIND_UNEXPECTED_CLOCK_CONFIGURATION = 1;
}

// Service for querying node state.
service NodeStateService {
  // Method used to get a CertificateHeader for a particular CertificateId.
  rpc GetCertificateHeader(GetCertificateHeaderRequest) returns (GetCertificateHeaderResponse);

  // Method used to get the latest known certificate header for a network.
  rpc GetLatestCertificateHeader(GetLatestCertificateHeaderRequest) returns (GetLatestCertificateHeaderResponse);
}

// Error kind for GetCertificateHeader RPC.
enum GetCertificateHeaderErrorKind {
  // Unspecified error.
  GET_CERTIFICATE_HEADER_ERROR_KIND_UNSPECIFIED = 0;
  // Internal error.
  GET_CERTIFICATE_HEADER_ERROR_KIND_INTERNAL = 1;
  // Missing certificate id.
  GET_CERTIFICATE_HEADER_ERROR_KIND_MISSING_CERTIFICATE_ID = 2;
  // Malformed certificate id.
  GET_CERTIFICATE_HEADER_ERROR_KIND_MALFORMED_CERTIFICATE_ID = 3;
}

// Error kind for GetLatestCertificateHeader RPC.
enum GetLatestCertificateHeaderErrorKind {
  // Unspecified error.
  GET_LATEST_CERTIFICATE_HEADER_ERROR_KIND_UNSPECIFIED = 0;
  // Internal error.
  GET_LATEST_CERTIFICATE_HEADER_ERROR_KIND_INTERNAL = 1;
  // Missing network id.
  GET_LATEST_CERTIFICATE_HEADER_ERROR_KIND_MISSING_NETWORK_ID = 2;
  // Malformed network id.
  GET_LATEST_CERTIFICATE_HEADER_ERROR_KIND_MALFORMED_NETWORK_ID = 3;
  // Invalid request type.
  GET_LATEST_CERTIFICATE_HEADER_ERROR_KIND_INVALID_REQUEST_TYPE = 4;
}

// Request to get a CertificateHeader for a particular CertificateId.
message GetCertificateHeaderRequest {
  // The certificate identifier.
  protocol.types.v1.CertificateId certificate_id = 1;
}

// Response to the CertificateHeader request.
message GetCertificateHeaderResponse {
  // The certificate header.
  protocol.types.v1.CertificateHeader certificate_header = 1;
}

// Request to get the current epoch configuration.
message GetEpochConfigurationRequest {}

// Response to the current epoch configuration request.
message GetEpochConfigurationResponse {
  // The epoch configuration.
  protocol.types.v1.EpochConfiguration epoch_configuration = 1;
}

// Request to get the latest known/pending/settled certificate header for a network.
message GetLatestCertificateHeaderRequest {
  // Which type of latest certificate we want to get.
  LatestCertificateRequestType type = 1;

  // The network identifier.
  uint32 network_id = 2;
}

// The type of latest certificate we want to get.
enum LatestCertificateRequestType {
  // Default value
  LATEST_CERTIFICATE_REQUEST_TYPE_UNSPECIFIED = 0;

  // Pending certificate.
  LATEST_CERTIFICATE_REQUEST_TYPE_PENDING = 1;

  // Settled certificate.
  LATEST_CERTIFICATE_REQUEST_TYPE_SETTLED = 2;
}

// Response to the latest known/pending/settled certificate header request.
message GetLatestCertificateHeaderResponse {
  // The latest certificate header.
  protocol.types.v1.CertificateHeader certificate_header = 1;
}
