syntax = "proto3";

package agglayer.node.v1;

import "agglayer/protocol/types/v1/certificate_header.proto";
import "agglayer/protocol/types/v1/epoch_configuration.proto";

// Service for querying the current epoch configuration.
service ConfigurationService {
  // Method used to get the current epoch configuration.
  rpc GetEpochConfiguration(GetEpochConfigurationRequest) returns (GetEpochConfigurationResponse);
}

// Service for querying network state.
service NetworkStateService {
  // Method used to get the latest known certificate header for a network.
  rpc GetLatestCertificateHeader(GetLatestCertificateHeaderRequest) returns (GetLatestCertificateHeaderResponse);
}

// Request to get the current epoch configuration.
message GetEpochConfigurationRequest {}

// Response to the current epoch configuration request.
message GetEpochConfigurationResponse {
  // The epoch configuration.
  protocol.types.v1.EpochConfiguration epoch_configuration = 1;
}

// Request to get the latest known/pending/settled certificate header for a network.
message GetLatestCertificateHeaderRequest {
  // Which type of latest certificate we want to get.
  LatestCertificateRequestType type = 1;

  // The network identifier.
  uint32 network_id = 2;
}

enum LatestCertificateRequestType {
  // Default value
  LATEST_CERTIFICATE_REQUEST_TYPE_UNSPECIFIED = 0;

  // Known certificate.
  LATEST_CERTIFICATE_REQUEST_TYPE_KNOWN = 1;

  // Pending certificate.
  LATEST_CERTIFICATE_REQUEST_TYPE_PENDING = 2;

  // Settled certificate.
  LATEST_CERTIFICATE_REQUEST_TYPE_SETTLED = 3;
}

// Response to the latest known/pending/settled certificate header request.
message GetLatestCertificateHeaderResponse {
  // The latest certificate header.
  protocol.types.v1.CertificateHeader certificate_header = 1;
}
