syntax = "proto3";

package agglayer.node.v1.types;

import "agglayer/interop/types/v1/aggchain.proto";
import "agglayer/interop/types/v1/bridge_exit.proto";
import "agglayer/interop/types/v1/bytes.proto";
import "agglayer/interop/types/v1/imported_bridge_exit.proto";

// Certificate type.
message Certificate {
  // NetworkID of the origin network.
  uint32 network_id = 1;
  // Simple increment to count the Certificate per network.
  uint64 height = 2;
  // Previous local exit root.
  agglayer.interop.types.v1.FixedBytes32 prev_local_exit_root = 3;
  // New local exit root.
  agglayer.interop.types.v1.FixedBytes32 new_local_exit_root = 4;
  // List of bridge exits included in this state transition.
  repeated agglayer.interop.types.v1.BridgeExit bridge_exits = 5;
  // List of imported bridge exits included in this state transition.
  repeated agglayer.interop.types.v1.ImportedBridgeExit imported_bridge_exits = 6;
  // Fixed size field of arbitrary data for the chain needs.
  agglayer.interop.types.v1.FixedBytes32 metadata = 7;
  // Aggchain data.
  agglayer.interop.types.v1.AggchainData aggchain_data = 8;
  // custom chain data.
  bytes custom_chain_data = 9;
}

// // Aggchaindata is the data sent by the aggchain.
// message AggchainData {
//   // The data of the aggchain.
//   oneof data {
//     // Signature committed to the bridge exits and imported bridge exits.
//     FixedBytes65 signature = 1;
//     // Generic Aggchain proof.
//     AggchainProof generic = 2;
//   }
// }

// // Aggchain proof.
// message AggchainProof {
//   // Aggchain params.
//   FixedBytes32 aggchain_params = 1;
//   // Aggchain proof context to share non-sensitive data.
//   map<string, bytes> context = 2;
//   // The proof for the aggchain.
//   oneof proof {
//     // SP1 stark proof.
//     bytes sp1_stark = 3;
//   }
// }

// // Certificate identifier.
// message CertificateId {
//   // bytes representation of the certificate id.
//   FixedBytes32 value = 1;
// }
