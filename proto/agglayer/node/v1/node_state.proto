syntax = "proto3";

package agglayer.node.v1;

import "agglayer/protocol/types/v1/certificate.proto";
import "agglayer/protocol/types/v1/certificate_header.proto";

// Service for querying node state.
service NodeStateService {
  // Method used to get a CertificateHeader for a particular CertificateId.
  rpc GetCertificateHeader(GetCertificateHeaderRequest) returns (GetCertificateHeaderResponse);

  // Method used to get the latest known certificate header for a network.
  rpc GetLatestCertificateHeader(GetLatestCertificateHeaderRequest) returns (GetLatestCertificateHeaderResponse);
}

// Error kind for GetCertificateHeader RPC.
enum GetCertificateHeaderErrorKind {
  // Unspecified error.
  GET_CERTIFICATE_HEADER_ERROR_KIND_UNSPECIFIED = 0;

  // Missing field.
  GET_CERTIFICATE_HEADER_ERROR_KIND_MISSING_FIELD = 1;

  // Invalid data.
  GET_CERTIFICATE_HEADER_ERROR_KIND_INVALID_DATA = 2;

  // Certificate not found.
  GET_CERTIFICATE_HEADER_ERROR_KIND_NOT_FOUND = 3;
}

// Error kind for GetLatestCertificateHeader RPC.
enum GetLatestCertificateHeaderErrorKind {
  // Unspecified error.
  GET_LATEST_CERTIFICATE_HEADER_ERROR_KIND_UNSPECIFIED = 0;

  // Missing field.
  GET_LATEST_CERTIFICATE_HEADER_ERROR_KIND_MISSING_FIELD = 1;

  // Invalid data.
  GET_LATEST_CERTIFICATE_HEADER_ERROR_KIND_INVALID_DATA = 2;

  // Certificate not found.
  GET_LATEST_CERTIFICATE_HEADER_ERROR_KIND_NOT_FOUND = 3;
}

// Request to get a CertificateHeader for a particular CertificateId.
message GetCertificateHeaderRequest {
  // The certificate identifier.
  protocol.types.v1.CertificateId certificate_id = 1;
}

// Response to the CertificateHeader request.
message GetCertificateHeaderResponse {
  // The certificate header.
  protocol.types.v1.CertificateHeader certificate_header = 1;
}

// Request to get the latest known/pending/settled certificate header for a network.
message GetLatestCertificateHeaderRequest {
  // Which type of latest certificate we want to get.
  LatestCertificateRequestType type = 1;

  // The network identifier.
  uint32 network_id = 2;
}

// The type of latest certificate we want to get.
enum LatestCertificateRequestType {
  // Default value
  LATEST_CERTIFICATE_REQUEST_TYPE_UNSPECIFIED = 0;

  // Pending certificate.
  LATEST_CERTIFICATE_REQUEST_TYPE_PENDING = 1;

  // Settled certificate.
  LATEST_CERTIFICATE_REQUEST_TYPE_SETTLED = 2;
}

// Response to the latest known/pending/settled certificate header request.
message GetLatestCertificateHeaderResponse {
  // The latest certificate header.
  protocol.types.v1.CertificateHeader certificate_header = 1;
}
