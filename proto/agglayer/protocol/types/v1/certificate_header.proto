syntax = "proto3";

package agglayer.protocol.types.v1;

import "agglayer/protocol/types/v1/bytes.proto";
import "agglayer/protocol/types/v1/certificate.proto";

// Certificate header type.
message CertificateHeader {
  // NetworkID for the certificate.
  uint32 network_id = 1;
  // Height of the certificate.
  uint64 height = 2;
  // Epoch number where the certificate was settled.
  optional uint64 epoch_number = 3;
  // Certificate index in the epoch.
  optional uint64 certificate_index = 4;
  // Certificate ID.
  CertificateId certificate_id = 5;
  // Previous local exit root.
  FixedBytes32 prev_local_exit_root = 6;
  // New local exit root.
  FixedBytes32 new_local_exit_root = 7;
  // Fixed size field of arbitrary data for the chain needs.
  FixedBytes32 metadata = 8;
  // Certificate status.
  CertificateStatus status = 9;
  // Certificate status error details. Present iff `status` is `CERTIFICATE_STATUS_IN_ERROR`.
  CertificateStatusError error = 10;
  // Settlement transaction hash.
  FixedBytes32 settlement_tx_hash = 11;
}

// Certificate status type.
enum CertificateStatus {
  // Unspecified certificate status.
  CERTIFICATE_STATUS_UNSPECIFIED = 0;
  // Certificate is pending.
  CERTIFICATE_STATUS_PENDING = 1;
  // Certificate is proven.
  CERTIFICATE_STATUS_PROVEN = 2;
  // Certificate is candidate.
  CERTIFICATE_STATUS_CANDIDATE = 3;
  // Certificate is in error.
  CERTIFICATE_STATUS_IN_ERROR = 4;
  // Certificate is settled.
  CERTIFICATE_STATUS_SETTLED = 5;
}

// Certificate status error type.
message CertificateStatusError {
  // Error message.
  bytes message = 1;
}
