syntax = "proto3";

package agglayer.storage.v0;

// All the possible values that can be stored in the network info.
message NetworkInfoValue {
  // The type of value being stored.
  oneof value {
    // The network type
    NetworkType network_type = 1;
    // Represents the current settled certificate for a given network.
    SettledCertificate settled_certificate = 2;
    // Info about the latest settled claim in the network.
    SettledClaim settled_claim = 3;
    // The latest pending certificate.
    LatestPendingCertificateInfo latest_pending_certificate_info = 4;
  }
}

// Represents the current settled certificate for a given network.
message SettledCertificate {
  // The ID of the latest settled certificate.
  SettledCertificateId certificate_id = 1;
  // The pessimistic proof root of the latest settled certificate.
  SettledPessimisticProofRoot pp_root = 2;
  // The leaf count of the latest settled local exit tree.
  SettledLocalExitTreeLeafCount let_leaf_count = 3;
  // The local exit root of the latest settled certificate.
  SettledLocalExitRoot ler = 4;
}

// The network type
enum NetworkType {
  // Unspecified network type.
  NETWORK_TYPE_UNSPECIFIED = 0;
  // ECDSA-based network type.
  NETWORK_TYPE_ECDSA = 1;
  // Generic network type.
  NETWORK_TYPE_GENERIC = 2;
  /// Multisig-only network type.
  NETWORK_TYPE_MULTISIG_ONLY = 3;
  /// Multisig and aggchain proof network type.
  NETWORK_TYPE_MULTISIG_AND_AGGCHAIN_PROOF = 4;
}

// SettledCertificateId represents the ID of the latest settled certificate.
message SettledCertificateId {
  // The certificate ID in bytes
  bytes id = 1;
}

// The pessimistic proof root of the latest settled certificate.
message SettledPessimisticProofRoot {
  // The root hash
  bytes root = 1;
}

// The local exit root of the latest settled certificate.
message SettledLocalExitRoot {
  // The root hash
  bytes root = 1;
}

// The leaf count of the latest settled local exit tree.
message SettledLocalExitTreeLeafCount {
  // The leaf count
  uint64 settled_let_leaf_count = 1;
}

// Info about the latest settled claim in the network.
message SettledClaim {
  // Global index, indicating uniquely which tree leaf is claimed.
  GlobalIndex global_index = 1;
  // Hash of the claimed imported bridge exit.
  BridgeExitHash bridge_exit_hash = 2;
}

// Global index, indicating uniquely which tree leaf is claimed.
message GlobalIndex {
  // The global index in bytes
  bytes value = 1;
}

/// Hash of the claimed imported bridge exit.
message BridgeExitHash {
  // The bridge exit hash in bytes
  bytes bridge_exit_hash = 2;
}

// The latest pending certificate.
message LatestPendingCertificateInfo {
  // The actual certificate height that is in pending
  LatestPendingCertificateHeight height = 1;
  // The ID of the latest pending certificate.
  LatestPendingCertificateId id = 2;
}

// The actual certificate height that is in pending
message LatestPendingCertificateHeight {
  // The height
  uint64 height = 1;
}

// The ID of the latest pending certificate.
message LatestPendingCertificateId {
  // The certificate ID in bytes
  bytes id = 1;
}
