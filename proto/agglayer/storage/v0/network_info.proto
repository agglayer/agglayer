syntax = "proto3";

package agglayer.storage.v0;

// All the possible values that can be stored in the network info.
message NetworkInfoValue {
  // The type of value being stored.
  oneof value {
    // The network type
    NetworkType network_type = 1;

    // Represents the current settled certificate for a given network.
    SettledCertificateInfo latest_settled_certificate = 2;

    // Info about the latest settled claim in the network.
    SettledClaim latest_settled_claim = 3;

    // The latest pending certificate.
    PendingCertificateInfo latest_pending_certificate_info = 4;

    // The latest proven certificate.
    ProvenCertificateInfo latest_proven_certificate_info = 5;
  }
}

// Represents the current settled certificate for a given network.
message SettledCertificateInfo {
  // The ID of the latest settled certificate.
  CertificateId certificate_id = 1;

  // The pessimistic proof root of the latest settled certificate.
  PessimisticProofRoot pp_root = 2;

  // The leaf count of the latest settled local exit tree.
  LocalExitTreeLeafCount let_leaf_count = 3;

  // The local exit root of the latest settled certificate.
  LocalExitRoot ler = 4;

  // The height of the latest settled certificate.
  Height height = 5;

  // The epoch number in which the latest settled certificate was settled.
  EpochNumber epoch = 6;

  // The index of the certificate in the epoch.
  CertificateIndexInEpoch index_in_epoch = 7;
}

// The network type
enum NetworkType {
  // Unspecified network type.
  NETWORK_TYPE_UNSPECIFIED = 0;

  // ECDSA-based network type.
  NETWORK_TYPE_ECDSA = 1;

  // Generic network type.
  NETWORK_TYPE_GENERIC = 2;

  /// Multisig-only network type.
  NETWORK_TYPE_MULTISIG_ONLY = 3;

  /// Multisig and aggchain proof network type.
  NETWORK_TYPE_MULTISIG_AND_AGGCHAIN_PROOF = 4;
}

// The pessimistic proof root of the latest settled certificate.
message PessimisticProofRoot {
  // The root hash
  bytes root = 1;
}

// The local exit root of the latest settled certificate.
message LocalExitRoot {
  // The root hash
  bytes root = 1;
}

// The leaf count of the latest settled local exit tree.
message LocalExitTreeLeafCount {
  // The leaf count
  uint64 let_leaf_count = 1;
}

// Info about the latest settled claim in the network.
message SettledClaim {
  // Global index, indicating uniquely which tree leaf is claimed.
  GlobalIndex global_index = 1;

  // Hash of the claimed imported bridge exit.
  BridgeExitHash bridge_exit_hash = 2;
}

// Global index, indicating uniquely which tree leaf is claimed.
message GlobalIndex {
  // The global index in bytes
  bytes value = 1;
}

/// Hash of the claimed imported bridge exit.
message BridgeExitHash {
  // The bridge exit hash in bytes
  bytes bridge_exit_hash = 2;
}

// The latest pending certificate.
message PendingCertificateInfo {
  // The actual certificate height that is in pending
  Height height = 1;

  // The ID of the latest pending certificate.
  CertificateId id = 2;
}

// The latest proven certificate.
message ProvenCertificateInfo {
  // The actual certificate height that is proven
  Height height = 1;

  // The ID of the latest proven certificate.
  CertificateId id = 2;
}

// The actual certificate height
message Height {
  // The height
  uint64 height = 1;
}

// The epoch number
message EpochNumber {
  // The epoch number
  uint64 epoch_number = 1;
}

// The index of the certificate in the epoch.
message CertificateIndexInEpoch {
  // The index in the epoch
  uint64 index = 1;
}

// The ID of a certificate.
message CertificateId {
  // The certificate ID in bytes
  bytes id = 1;
}
