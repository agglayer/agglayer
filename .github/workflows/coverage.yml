name: Coverage

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

concurrency: 
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  rust-unit-coverage:
    name: Unit & Linter coverage
    runs-on: ubuntu-latest-16-cores
    needs:
      - build_contracts_image
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: "contracts-image"
          path: "/tmp"

      - name: Load image
        run: |
          echo ${{ needs.build_contracts_image.outputs.tags }}
          docker load --input /tmp/contracts-image.tar
          docker image ls -a


      - name: Install toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly-2024-07-15
          components: clippy rustfmt llvm-tools-preview

      - name: Set up rust cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install SP1UP
        run: curl -L https://sp1.succinct.xyz | bash

      - name: Install SP1 toolchain
        run: /home/runner/.sp1/bin/sp1up
        shell: bash

      - name: Install Anvil
        uses: foundry-rs/foundry-toolchain@v1

      - uses: taiki-e/install-action@grcov
      - uses: taiki-e/install-action@protoc
      - uses: taiki-e/install-action@nextest
      - name: Install cargo-sonar and run Clippy
        run: |
            cargo install cargo-sonar
            cargo clippy --all-features --all-targets --message-format=json > clippy.json
            cargo sonar --clippy

      - name: Build with coverage
        env:
          RUST_LOG: info
          LLVM_PROFILE_FILE: "llvm_profile-instrumentation-%p-%m.profraw"
        run: cargo nextest run --workspace -F coverage --cargo-profile codecov -Z profile-rustflags

      - name: Run grcov
        run: |
          grcov . --binary-path target/codecov/ -s . \
            -t lcov \
            --branch \
            --ignore-not-existing \
            --ignore '../**' \
            --ignore '/*' \
            -o coverage.lcov

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.externalIssuesReportPaths=sonar-issues.json
            -Dsonar.scm.revision=${{ github.event.pull_request.head.sha }}

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v5
        continue-on-error: true
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true

  build_contracts_image:
    runs-on: ubuntu-latest-16-cores

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          repository: 0xPolygonHermez/zkevm-contracts
          ref: v9.0.0-rc.3-pp

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup docker
        run: |
          npm i
      - name: Build docker
        run: |
          # Script from contract repo
          set -e
          rm -rf docker/gethData/geth_data
          DEV_PERIOD=1 docker compose -f docker/docker-compose.yml up -d geth
          sleep 5
          node docker/scripts/fund-accounts.js
          cp docker/scripts/v2/deploy_parameters_docker.json deployment/v2/deploy_parameters.json
          cp docker/scripts/v2/create_rollup_parameters_docker.json deployment/v2/create_rollup_parameters.json
          npm run deploy:testnet:v2:localhost
          rm -rf docker/deploymentOutput
          mkdir docker/deploymentOutput
          mv deployment/v2/deploy_output.json docker/deploymentOutput
          mv deployment/v2/genesis.json docker/deploymentOutput
          [ -f deployment/v2/genesis_sovereign.json ] && mv deployment/v2/genesis_sovereign.json docker/deploymentOutput
          mv deployment/v2/create_rollup_output.json docker/deploymentOutput
          DEV_PERIOD=1 docker compose -f docker/docker-compose.yml down
          sudo chmod -R go+rxw docker/gethData
          ls -lah docker

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: hermeznetwork/geth-zkevm-contracts

      - name: Build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: hermeznetwork/geth-zkevm-contracts:latest
          file: docker/Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          outputs: ${{ format('type=docker,dest={0}/{1}.tar', '/tmp', 'contracts-image') }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: "contracts-image"
          path: /tmp/contracts-image.tar


