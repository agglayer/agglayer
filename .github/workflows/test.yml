name: Test

on:
  push:
    branches:
      - main
  merge_group:
  pull_request:
    branches:
      - "**"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref == 'refs/heads/main' && github.run_id || github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  ZKEVM_CONTRACT_GIT_REF: feature/ongoing-v0.3.0-docker

jobs:
  unit:
    name: Unit Tests
    runs-on: ubuntu-latest-16-cores
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: ./.github/actions/unit-test

  isolated-feature-checks:
    name: 'Isolated feature checks'
    runs-on: ubuntu-latest-16-cores
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}
      - uses: taiki-e/install-action@v2
        with:
          tool: protoc,cargo-hack
      - run: cargo hack --each-feature --all check --all-targets

  build_contracts_image:
    runs-on: ubuntu-latest-16-cores
    if: ${{ contains('["merge_group", "workflow_dispatch"]', github.event_name) }} # skip-merge queue
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: 0xPolygonHermez/zkevm-contracts
          ref: ${{ env.ZKEVM_CONTRACT_GIT_REF }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install npm packages
        run: |
          npm i
      - name: Build docker
        run: |
          # Set the -e option to stop the script if any command fails
          set -e

          # Define cleanup function
          cleanup() {
              DEV_PERIOD=1 docker compose -f docker/docker-compose.yml down
          }
          # Configure "trap" in case there's an error
          trap cleanup ERR

          rm -rf docker/gethData/geth_data
          [ -f deployment/v2/create_rollup_output_* ] && rm ./deployment/v2/create_rollup_output_*
          DEV_PERIOD=1 docker compose -f docker/docker-compose.yml up -d geth
          sleep 5
          node docker/scripts/fund-accounts.js
          cp docker/scripts/v2/deploy_parameters_docker.json deployment/v2/deploy_parameters.json
          cp docker/scripts/v2/create_rollup_parameters_docker.json deployment/v2/create_rollup_parameters.json
          npm run deploy:testnet:v2:localhost
          rm -rf docker/deploymentOutput
          mkdir docker/deploymentOutput
          mv ./deployment/v2/create_rollup_output_*.json ./docker/deploymentOutput/create_rollup_output.json
          cp ./docker/scripts/v2/create_rollup_parameters_docker-v0.2.0.json ./deployment/v2/create_rollup_parameters.json
          npx hardhat run ./deployment/v2/4_createRollup.ts --network localhost
          mv ./deployment/v2/create_rollup_output_*.json ./docker/deploymentOutput/
          mv deployment/v2/deploy_output.json docker/deploymentOutput
          mv deployment/v2/genesis.json docker/deploymentOutput
          [ -f deployment/v2/genesis_sovereign.json ] && mv deployment/v2/genesis_sovereign.json docker/deploymentOutput
          DEV_PERIOD=1 docker compose -f docker/docker-compose.yml down
          sudo chown -R $(id -u):$(id -g) docker/gethData
          docker build -t hermeznetwork/geth-zkevm-contracts -f docker/Dockerfile .

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: hermeznetwork/geth-zkevm-contracts

      - name: Build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: hermeznetwork/geth-zkevm-contracts:latest
          file: docker/Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          outputs: ${{ format('type=docker,dest={0}/{1}.tar', '/tmp', 'contracts-image') }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: "contracts-image"
          path: /tmp/contracts-image.tar

  integrations:
    name: Integration tests
    needs:
      - build_contracts_image
    runs-on: ubuntu-latest-16-cores
    timeout-minutes: 30
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: "contracts-image"
          path: "/tmp"

      - name: Load image
        run: |
          echo ${{ needs.build_contracts_image.outputs.tags }}
          docker load --input /tmp/contracts-image.tar
          docker image ls -a

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Set up rust cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - uses: taiki-e/install-action@v2
        with:
          tool: nextest,protoc,cargo-hack

      - name: Install Anvil
        uses: foundry-rs/foundry-toolchain@v1

      - name: Test
        run: cargo nextest run --workspace -P integrations

  docker-build-local:
    name: E2E Tests | Docker build
    if: ${{ contains('["merge_group", "workflow_dispatch"]', github.event_name) }} # skip-merge queue
    uses: ./.github/workflows/docker-build.yml
    secrets: inherit
    with:
      push: false
      local-artifact-name: "docker-image"
      local-artifact-dir: "/tmp"

  call-cdk-e2e-workflow:
    name: E2E Tests | Kurtosis-CDK
    needs:
      - docker-build-local
    uses: agglayer/e2e/.github/workflows/cdk-e2e.yml@4ddee2c4bde34fd581fff96c3f822dd0eab9e1e6
    secrets: inherit
    with:
      docker-image-override: agglayer_image
      docker-tag: ${{ needs.docker-build-local.outputs.tags }}
      kurtosis-cdk-ref: main
      docker-artifact-name: docker-image
      agglayer-e2e-ref: 4ddee2c4bde34fd581fff96c3f822dd0eab9e1e6
      kurtosis-cdk-args: |
        {
          "deployment_stages": {
          "deploy_l2_contracts": true,
          "deploy_cdk_bridge_ui": false
        },
          "args": {
            "consensus_contract_type": "pessimistic",
            "erigon_strict_mode": false,
            "enable_normalcy": true,
            "agglayer_prover_sp1_key": "",
            "agglayer_prover_primary_prover": "mock-prover",
            "sequencer_type": "erigon",
            "zkevm_contracts_image": "leovct/zkevm-contracts:v10.0.0-rc.3-fork.12"
          }
        }

  pushing-docker-image:
    name: Docker | Publish image to registry
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || ( github.event_name == 'workflow_dispatch' )
    permissions:
      packages: write
    needs:
      - docker-build-local
      - call-cdk-e2e-workflow
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: "docker-image"
          path: "/tmp"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Load image
        run: |
          echo ${{ needs.docker-build-local.outputs.tags }}
          docker load --input /tmp/docker-image.tar

      - name: Publishing image
        env:
          DOCKER_IMAGE: ${{ needs.docker-build-local.outputs.tags }}
        run: docker push ${{ env.DOCKER_IMAGE }}

  check_elf:
    runs-on: ubuntu-latest-16-cores
    if: ${{ contains('["merge_group", "workflow_dispatch"]', github.event_name) }}
    name: ELF Checking
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Define source checksum
        run: |
          echo CHECKSUM="$(sha256sum crates/pessimistic-proof-program/elf/riscv32im-succinct-zkvm-elf | awk '{ print $1 }')" >> "$GITHUB_ENV"

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Set up rust cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - uses: taiki-e/install-action@protoc

      - name: Define vKey
        run: |
          echo ORIGINAL_VKEY="$(cargo run -p agglayer -- vkey)" >> "$GITHUB_ENV"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - uses: taiki-e/install-action@protoc

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - run: cargo make pp-elf

      - name: ELF is up to date
        run: diff <(sha256sum crates/pessimistic-proof-program/elf/riscv32im-succinct-zkvm-elf | awk '{ print $1 }') <( echo $CHECKSUM )

      - name: Check vKey
        run: |
          CALCULATED_VKEY=$(cargo run -p agglayer -- vkey)
          echo "Commited vKey=$ORIGINAL_VKEY"
          echo "Calculated vKey=$CALCULATED_VKEY"
          diff <(echo $CALCULATED_VKEY) <( echo $ORIGINAL_VKEY )
